{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../node_modules/svelte-router-spa/src/store.js","../../node_modules/svelte-router-spa/src/router/url_parser.js","../../node_modules/svelte-router-spa/src/lib/utils.js","../../node_modules/svelte-router-spa/src/router/current.js","../../node_modules/svelte-router-spa/src/router/redirect.js","../../node_modules/svelte-router-spa/src/router/guard.js","../../node_modules/svelte-router-spa/src/router/path.js","../../node_modules/svelte-router-spa/src/router/finder.js","../../node_modules/svelte-router-spa/src/router/route.js","../../node_modules/svelte-router-spa/src/spa_router.js","../../node_modules/svelte-router-spa/src/components/route.svelte","../../node_modules/svelte-router-spa/src/components/router.svelte","../../src/components/Layout.svelte","../../src/constants/colors.js","../../src/components/Button.svelte","../../src/pages/MainPage.svelte","../../src/pages/HomePage.svelte","../../src/pages/404.svelte","../../src/components/Input.svelte","../../src/components/Modal.svelte","../../src/constants/cards.js","../../src/store/autodistrib.js","../../src/store/manualdistrib.js","../../src/components/Container.svelte","../../src/components/Table.svelte","../../src/store/showdistrib.js","../../src/pages/DistributionPreview.svelte","../../src/pages/AutoDistribution.svelte","../../src/pages/ManualDistribution.svelte","../../src/pages/ShowDistribution.svelte","../../src/routes/routes.js","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape_attribute_value(value.toString())}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.48.0' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        throw new Error(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { writable } from 'svelte/store';\n\nconst { set, subscribe } = writable({});\n\nconst remove = () => {\n  set({});\n};\n\nconst activeRoute = {\n  subscribe,\n  set,\n  remove,\n};\n\nexport { activeRoute };\n","const UrlParser = (urlString, namedUrl = '') => {\n  const urlBase = new URL(urlString);\n\n  /**\n   * Wrapper for URL.hash\n   *\n   **/\n  function hash() {\n    return urlBase.hash;\n  }\n\n  /**\n   * Wrapper for URL.host\n   *\n   **/\n  function host() {\n    return urlBase.host;\n  }\n\n  /**\n   * Wrapper for URL.hostname\n   *\n   **/\n  function hostname() {\n    return urlBase.hostname;\n  }\n\n  /**\n   * Returns an object with all the named params and their values\n   *\n   **/\n  function namedParams() {\n    const allPathName = pathNames();\n    const allNamedParamsKeys = namedParamsWithIndex();\n\n    return allNamedParamsKeys.reduce((values, paramKey) => {\n      values[paramKey.value] = allPathName[paramKey.index];\n      return values;\n    }, {});\n  }\n\n  /**\n   * Returns an array with all the named param keys\n   *\n   **/\n  function namedParamsKeys() {\n    const allNamedParamsKeys = namedParamsWithIndex(namedUrl);\n\n    return allNamedParamsKeys.reduce((values, paramKey) => {\n      values.push(paramKey.value);\n      return values;\n    }, []);\n  }\n\n  /**\n   * Returns an array with all the named param values\n   *\n   **/\n  function namedParamsValues() {\n    const allPathName = pathNames();\n    const allNamedParamsKeys = namedParamsWithIndex();\n\n    return allNamedParamsKeys.reduce((values, paramKey) => {\n      values.push(allPathName[paramKey.index]);\n      return values;\n    }, []);\n  }\n\n  /**\n   * Returns an array with all named param ids and their position in the path\n   * Private\n   **/\n  function namedParamsWithIndex() {\n    const namedUrlParams = getPathNames(namedUrl);\n\n    return namedUrlParams.reduce((validParams, param, index) => {\n      if (param[0] === ':') {\n        validParams.push({ value: param.slice(1), index });\n      }\n      return validParams;\n    }, []);\n  }\n\n  /**\n   * Wrapper for URL.port\n   *\n   **/\n  function port() {\n    return urlBase.port;\n  }\n\n  /**\n   * Wrapper for URL.pathname\n   *\n   **/\n  function pathname() {\n    return urlBase.pathname;\n  }\n\n  /**\n   * Wrapper for URL.protocol\n   *\n   **/\n  function protocol() {\n    return urlBase.protocol;\n  }\n\n  /**\n   * Wrapper for URL.search\n   *\n   **/\n  function search() {\n    return urlBase.search;\n  }\n\n  /**\n   * Returns an object with all query params and their values\n   *\n   **/\n  function queryParams() {\n    const params = {};\n    urlBase.searchParams.forEach((value, key) => {\n      params[key] = value;\n    });\n\n    return params;\n  }\n\n  /**\n   * Returns an array with all the query param keys\n   *\n   **/\n  function queryParamsKeys() {\n    const params = [];\n    urlBase.searchParams.forEach((_value, key) => {\n      params.push(key);\n    });\n\n    return params;\n  }\n\n  /**\n   * Returns an array with all the query param values\n   *\n   **/\n  function queryParamsValues() {\n    const params = [];\n    urlBase.searchParams.forEach((value) => {\n      params.push(value);\n    });\n\n    return params;\n  }\n\n  /**\n   * Returns an array with all the elements of a pathname\n   *\n   **/\n  function pathNames() {\n    return getPathNames(urlBase.pathname);\n  }\n\n  /**\n   * Returns an array with all the parts of a pathname\n   * Private method\n   **/\n  function getPathNames(pathName) {\n    if (pathName === '/' || pathName.trim().length === 0) return [pathName];\n    if (pathName.slice(-1) === '/') {\n      pathName = pathName.slice(0, -1);\n    }\n    if (pathName[0] === '/') {\n      pathName = pathName.slice(1);\n    }\n\n    return pathName.split('/');\n  }\n\n  return Object.freeze({\n    hash: hash(),\n    host: host(),\n    hostname: hostname(),\n    namedParams: namedParams(),\n    namedParamsKeys: namedParamsKeys(),\n    namedParamsValues: namedParamsValues(),\n    pathNames: pathNames(),\n    port: port(),\n    pathname: pathname(),\n    protocol: protocol(),\n    search: search(),\n    queryParams: queryParams(),\n    queryParamsKeys: queryParamsKeys(),\n    queryParamsValues: queryParamsValues(),\n  });\n};\n\nexport { UrlParser };\n","/**\n * Returns true if object has any nested routes empty\n * @param routeObject\n **/\nconst anyEmptyNestedRoutes = (routeObject) => {\n  let result = false;\n  if (Object.keys(routeObject).length === 0) {\n    return true;\n  }\n\n  if (routeObject.childRoute && Object.keys(routeObject.childRoute).length === 0) {\n    result = true;\n  } else if (routeObject.childRoute) {\n    result = anyEmptyNestedRoutes(routeObject.childRoute);\n  }\n\n  return result;\n};\n\n/**\n * Compare two routes ignoring named params\n * @param pathName string\n * @param routeName string\n **/\n\nconst compareRoutes = (pathName, routeName) => {\n  routeName = removeSlash(routeName);\n\n  if (routeName.includes(':')) {\n    return routeName.includes(pathName);\n  } else {\n    return routeName.startsWith(pathName);\n  }\n};\n\n/**\n * Returns a boolean indicating if the name of path exists in the route based on the language parameter\n * @param pathName string\n * @param route object\n * @param language string\n **/\n\nconst findLocalisedRoute = (pathName, route, language) => {\n  let exists = false;\n\n  if (language) {\n    return { exists: route.lang && route.lang[language] && route.lang[language].includes(pathName), language };\n  }\n\n  exists = compareRoutes(pathName, route.name);\n\n  if (!exists && route.lang && typeof route.lang === 'object') {\n    for (const [key, value] of Object.entries(route.lang)) {\n      if (compareRoutes(pathName, value)) {\n        exists = true;\n        language = key;\n      }\n    }\n  }\n\n  return { exists, language };\n};\n\n/**\n * Return all the consecutive named param (placeholders) of a pathname\n * @param pathname\n **/\nconst getNamedParams = (pathName = '') => {\n  if (pathName.trim().length === 0) return [];\n  const namedUrlParams = getPathNames(pathName);\n  return namedUrlParams.reduce((validParams, param) => {\n    if (param[0] === ':') {\n      validParams.push(param.slice(1));\n    }\n\n    return validParams;\n  }, []);\n};\n\n/**\n * Split a pathname based on /\n * @param pathName\n * Private method\n **/\nconst getPathNames = (pathName) => {\n  if (pathName === '/' || pathName.trim().length === 0) return [pathName];\n\n  pathName = removeSlash(pathName, 'both');\n\n  return pathName.split('/');\n};\n\n/**\n * Return the first part of a pathname until the first named param is found\n * @param name\n **/\nconst nameToPath = (name = '') => {\n  let routeName;\n  if (name === '/' || name.trim().length === 0) return name;\n  name = removeSlash(name, 'lead');\n  routeName = name.split(':')[0];\n  routeName = removeSlash(routeName, 'trail');\n\n  return routeName.toLowerCase();\n};\n\n/**\n * Return the path name excluding query params\n * @param name\n **/\nconst pathWithoutQueryParams = (currentRoute) => {\n  const path = currentRoute.path.split('?');\n  return path[0];\n};\n\n/**\n * Return the path name including query params\n * @param name\n **/\nconst pathWithQueryParams = (currentRoute) => {\n  let queryParams = [];\n  if (currentRoute.queryParams) {\n    for (let [key, value] of Object.entries(currentRoute.queryParams)) {\n      queryParams.push(`${key}=${value}`);\n    }\n  }\n\n  const hash = currentRoute.hash ? currentRoute.hash : '';\n\n  if (queryParams.length > 0) {\n    return `${currentRoute.path}?${queryParams.join('&')}${hash}`;\n  } else {\n    return currentRoute.path + hash;\n  }\n};\n\n/**\n * Returns a string with trailing or leading slash character removed\n * @param pathName string\n * @param position string - lead, trail, both\n **/\nconst removeExtraPaths = (pathNames, basePathNames) => {\n  const names = basePathNames.split('/');\n  if (names.length > 1) {\n    names.forEach(function (name, index) {\n      if (name.length > 0 && index > 0) {\n        pathNames.shift();\n      }\n    });\n  }\n\n  return pathNames;\n};\n\n/**\n * Returns a string with trailing or leading slash character removed\n * @param pathName string\n * @param position string - lead, trail, both\n **/\n\nconst removeSlash = (pathName, position = 'lead') => {\n  if (position === 'trail' || position === 'both') {\n    pathName = pathName.replace(/\\/$/, '');\n  }\n\n  if (position === 'lead' || position === 'both') {\n    pathName = pathName.replace(/^\\//, '');\n  }\n\n  return pathName;\n};\n\n/**\n * Returns the name of the route based on the language parameter\n * @param route object\n * @param language string\n **/\n\nconst routeNameLocalised = (route, language = null) => {\n  if (!language || !route.lang || !route.lang[language]) {\n    return route.name;\n  } else {\n    return route.lang[language];\n  }\n};\n\n/**\n * Return the path name excluding query params\n * @param name\n **/\nconst startsWithNamedParam = (currentRoute) => {\n  const routeName = removeSlash(currentRoute);\n\n  return routeName.startsWith(':');\n};\n\n/**\n * Updates the base route path.\n * Route objects can have nested routes (childRoutes) or just a long name like \"admin/employees/show/:id\"\n *\n * @param basePath string\n * @param pathNames array\n * @param route object\n * @param language string\n **/\n\nconst updateRoutePath = (basePath, pathNames, route, language, convert = false) => {\n  if (basePath === '/' || basePath.trim().length === 0) return { result: basePath, language: null };\n\n  let basePathResult = basePath;\n  let routeName = route.name;\n  let currentLanguage = language;\n\n  if (convert) {\n    currentLanguage = '';\n  }\n\n  routeName = removeSlash(routeName);\n  basePathResult = removeSlash(basePathResult);\n\n  if (!route.childRoute) {\n    let localisedRoute = findLocalisedRoute(basePathResult, route, currentLanguage);\n\n    if (localisedRoute.exists && convert) {\n      basePathResult = routeNameLocalised(route, language);\n    }\n\n    let routeNames = routeName.split(':')[0];\n    routeNames = removeSlash(routeNames, 'trail');\n    routeNames = routeNames.split('/');\n    routeNames.shift();\n    routeNames.forEach(() => {\n      const currentPathName = pathNames[0];\n      localisedRoute = findLocalisedRoute(`${basePathResult}/${currentPathName}`, route, currentLanguage);\n\n      if (currentPathName && localisedRoute.exists) {\n        if (convert) {\n          basePathResult = routeNameLocalised(route, language);\n        } else {\n          basePathResult = `${basePathResult}/${currentPathName}`;\n        }\n        pathNames.shift();\n      } else {\n        return { result: basePathResult, language: localisedRoute.language };\n      }\n    });\n    return { result: basePathResult, language: localisedRoute.language };\n  } else {\n    return { result: basePath, language: currentLanguage };\n  }\n};\n\nexport {\n  anyEmptyNestedRoutes,\n  compareRoutes,\n  findLocalisedRoute,\n  getNamedParams,\n  getPathNames,\n  nameToPath,\n  pathWithQueryParams,\n  pathWithoutQueryParams,\n  removeExtraPaths,\n  removeSlash,\n  routeNameLocalised,\n  startsWithNamedParam,\n  updateRoutePath,\n};\n","import { UrlParser } from './url_parser';\n\nimport { pathWithQueryParams, removeSlash } from '../lib/utils';\n\nconst RouterCurrent = (trackPage) => {\n  const trackPageview = trackPage || false;\n  let activeRoute = '';\n\n  const setActive = (newRoute, updateBrowserHistory) => {\n    activeRoute = newRoute.path;\n    pushActiveRoute(newRoute, updateBrowserHistory);\n  };\n\n  const active = () => {\n    return activeRoute;\n  };\n\n  /**\n   * Returns true if pathName is current active route\n   * @param pathName String The path name to check against the current route.\n   * @param includePath Boolean if true checks that pathName is included in current route. If false should match it.\n   **/\n  const isActive = (queryPath, includePath = false) => {\n    if (queryPath[0] !== '/') {\n      queryPath = '/' + queryPath;\n    }\n\n    // remove query params for comparison\n    let pathName = UrlParser(`http://fake.com${queryPath}`).pathname;\n    let activeRoutePath = UrlParser(`http://fake.com${activeRoute}`).pathname;\n\n    pathName = removeSlash(pathName, 'trail');\n\n    activeRoutePath = removeSlash(activeRoutePath, 'trail');\n\n    if (includePath) {\n      return activeRoutePath.includes(pathName);\n    } else {\n      return activeRoutePath === pathName;\n    }\n  };\n\n  const pushActiveRoute = (newRoute, updateBrowserHistory) => {\n    if (typeof window !== 'undefined') {\n      const pathAndSearch = pathWithQueryParams(newRoute);\n\n      if (updateBrowserHistory) {\n        window.history.pushState({ page: pathAndSearch }, '', pathAndSearch);\n      }\n      // Moving back in history does not update browser history but does update tracking.\n      if (trackPageview) {\n        gaTracking(pathAndSearch);\n      }\n    }\n  };\n\n  const gaTracking = (newPage) => {\n    if (typeof ga !== 'undefined') {\n      ga('set', 'page', newPage);\n      ga('send', 'pageview');\n    }\n  };\n\n  return Object.freeze({ active, isActive, setActive });\n};\n\nexport { RouterCurrent };\n","import { RouterGuard } from './guard';\n\nconst RouterRedirect = (route, currentPath) => {\n  const guard = RouterGuard(route.onlyIf);\n\n  const path = () => {\n    let redirectTo = currentPath;\n    if (route.redirectTo && route.redirectTo.length > 0) {\n      redirectTo = route.redirectTo;\n    }\n\n    if (guard.valid() && guard.redirect()) {\n      redirectTo = guard.redirectPath();\n    }\n\n    return redirectTo;\n  };\n\n  return Object.freeze({ path });\n};\n\nexport { RouterRedirect };\n","export const RouterGuard = (onlyIf) => {\n  const guardInfo = onlyIf;\n\n  const valid = () => {\n    return guardInfo && guardInfo.guard && typeof guardInfo.guard === 'function';\n  };\n\n  const redirect = () => {\n    return !guardInfo.guard();\n  };\n\n  const redirectPath = () => {\n    let destinationUrl = '/';\n    if (guardInfo.redirect && guardInfo.redirect.length > 0) {\n      destinationUrl = guardInfo.redirect;\n    }\n\n    return destinationUrl;\n  };\n\n  return Object.freeze({ valid, redirect, redirectPath });\n};\n","import {\n  getNamedParams,\n  nameToPath,\n  updateRoutePath,\n  removeExtraPaths,\n  routeNameLocalised\n} from '../lib/utils';\n\nfunction RouterPath({ basePath, basePathName, pathNames, convert, currentLanguage }) {\n  let updatedPathRoute;\n  let route;\n  let routePathLanguage = currentLanguage;\n\n  function updatedPath(currentRoute) {\n    route = currentRoute;\n    updatedPathRoute = updateRoutePath(basePathName, pathNames, route, routePathLanguage, convert);\n    routePathLanguage = convert ? currentLanguage : updatedPathRoute.language;\n\n    return updatedPathRoute;\n  }\n\n  function localisedPathName() {\n    return routeNameLocalised(route, routePathLanguage);\n  }\n\n  function localisedRouteWithoutNamedParams() {\n    return nameToPath(localisedPathName());\n  }\n\n  function basePathNameWithoutNamedParams() {\n    return nameToPath(updatedPathRoute.result);\n  }\n\n  function namedPath() {\n    let localisedPath = localisedPathName();\n    if (localisedPath && !localisedPath.startsWith('/')) {\n      localisedPath = '/' + localisedPath;\n    }\n\n    return basePath ? `${basePath}${localisedPath}` : localisedPath;\n  }\n\n  function routePath() {\n    let routePathValue = `${basePath}/${basePathNameWithoutNamedParams()}`;\n    if (routePathValue === '//') {\n      routePathValue = '/';\n    }\n\n    if (routePathLanguage) {\n      pathNames = removeExtraPaths(pathNames, localisedRouteWithoutNamedParams());\n    }\n\n    const namedParams = getNamedParams(localisedPathName());\n    if (namedParams && namedParams.length > 0) {\n      namedParams.forEach(function () {\n        if (pathNames.length > 0) {\n          routePathValue += `/${pathNames.shift()}`;\n        }\n      });\n    }\n\n    return routePathValue;\n  }\n\n  function routeLanguage() {\n    return routePathLanguage;\n  }\n\n  function basePathSameAsLocalised() {\n    return basePathNameWithoutNamedParams() === localisedRouteWithoutNamedParams();\n  }\n\n  return Object.freeze({\n    basePathSameAsLocalised,\n    updatedPath,\n    basePathNameWithoutNamedParams,\n    localisedPathName,\n    localisedRouteWithoutNamedParams,\n    namedPath,\n    pathNames,\n    routeLanguage,\n    routePath,\n  });\n}\n\nexport { RouterPath };\n","import { UrlParser } from './url_parser';\nimport { RouterRedirect } from './redirect';\nimport { RouterRoute } from './route';\nimport { RouterPath } from './path';\nimport { anyEmptyNestedRoutes, pathWithoutQueryParams, startsWithNamedParam } from '../lib/utils';\n\nconst NotFoundPage = '/404.html';\n\nfunction RouterFinder({ routes, currentUrl, routerOptions, convert }) {\n  const defaultLanguage = routerOptions.defaultLanguage;\n  const sitePrefix = routerOptions.prefix ? routerOptions.prefix.toLowerCase() : '';\n  const urlParser = parseCurrentUrl(currentUrl, sitePrefix);\n  let redirectTo = '';\n  let routeNamedParams = {};\n  let staticParamMatch = false;\n\n  function findActiveRoute() {\n    let searchActiveRoute = searchActiveRoutes(routes, '', urlParser.pathNames, routerOptions.lang, convert);\n\n    if (!searchActiveRoute || !Object.keys(searchActiveRoute).length || anyEmptyNestedRoutes(searchActiveRoute)) {\n      if (typeof window !== 'undefined') {\n        searchActiveRoute = routeNotFound(routerOptions.lang);\n      }\n    } else {\n      searchActiveRoute.path = pathWithoutQueryParams(searchActiveRoute);\n      if (sitePrefix) {\n        searchActiveRoute.path = `/${sitePrefix}${searchActiveRoute.path}`;\n      }\n    }\n\n    return searchActiveRoute;\n  }\n\n  /**\n   * Gets an array of routes and the browser pathname and return the active route\n   * @param routes\n   * @param basePath\n   * @param pathNames\n   **/\n  function searchActiveRoutes(routes, basePath, pathNames, currentLanguage, convert) {\n    let currentRoute = {};\n    let basePathName = pathNames.shift().toLowerCase();\n    const routerPath = RouterPath({ basePath, basePathName, pathNames, convert, currentLanguage });\n    staticParamMatch = false;\n\n    routes.forEach(function (route) {\n      routerPath.updatedPath(route);\n\n      if (matchRoute(routerPath, route.name)) {\n        let routePath = routerPath.routePath();\n        redirectTo = RouterRedirect(route, redirectTo).path();\n\n        if (currentRoute.name !== routePath) {\n          currentRoute = setCurrentRoute({\n            route,\n            routePath,\n            routeLanguage: routerPath.routeLanguage(),\n            urlParser,\n            namedPath: routerPath.namedPath(),\n          });\n        }\n\n        if (route.nestedRoutes && route.nestedRoutes.length > 0 && routerPath.pathNames.length > 0) {\n          currentRoute.childRoute = searchActiveRoutes(\n            route.nestedRoutes,\n            routePath,\n            routerPath.pathNames,\n            routerPath.routeLanguage(),\n            convert\n          );\n          currentRoute.path = currentRoute.childRoute.path;\n          currentRoute.language = currentRoute.childRoute.language;\n        } else if (nestedRoutesAndNoPath(route, routerPath.pathNames)) {\n          const indexRoute = searchActiveRoutes(\n            route.nestedRoutes,\n            routePath,\n            ['index'],\n            routerPath.routeLanguage(),\n            convert\n          );\n          if (indexRoute && Object.keys(indexRoute).length > 0) {\n            currentRoute.childRoute = indexRoute;\n            currentRoute.language = currentRoute.childRoute.language;\n          }\n        }\n      }\n    });\n\n    if (redirectTo) {\n      currentRoute.redirectTo = redirectTo;\n    }\n\n    return currentRoute;\n  }\n\n  function matchRoute(routerPath, routeName) {\n    const basePathSameAsLocalised = routerPath.basePathSameAsLocalised();\n    if (basePathSameAsLocalised) {\n      staticParamMatch = true;\n    }\n\n    return basePathSameAsLocalised || (!staticParamMatch && startsWithNamedParam(routeName));\n  }\n\n  function nestedRoutesAndNoPath(route, pathNames) {\n    return route.nestedRoutes && route.nestedRoutes.length > 0 && pathNames.length === 0;\n  }\n\n  function parseCurrentUrl(currentUrl, sitePrefix) {\n    if (sitePrefix && sitePrefix.trim().length > 0) {\n      const replacePattern = currentUrl.endsWith(sitePrefix) ? sitePrefix : sitePrefix + \"/\";\n      const noPrefixUrl = currentUrl.replace(replacePattern, '');\n      return UrlParser(noPrefixUrl);\n    } else {\n      return UrlParser(currentUrl);\n    }\n  }\n\n  function setCurrentRoute({ route, routePath, routeLanguage, urlParser, namedPath }) {\n    const routerRoute = RouterRoute({\n      routeInfo: route,\n      urlParser,\n      path: routePath,\n      routeNamedParams,\n      namedPath,\n      language: routeLanguage || defaultLanguage,\n    });\n    routeNamedParams = routerRoute.namedParams();\n\n    return routerRoute.get();\n  }\n\n  const routeNotFound = (customLanguage) => {\n    const custom404Page = routes.find((route) => route.name == '404');\n    const language = customLanguage || defaultLanguage || '';\n    if (custom404Page) {\n      return { ...custom404Page, language, path: '404' };\n    } else {\n      return { name: '404', component: '', path: '404', redirectTo: NotFoundPage };\n    }\n  };\n\n  return Object.freeze({ findActiveRoute });\n}\n\nexport { RouterFinder };\n","import { UrlParser } from './url_parser';\n\nfunction RouterRoute({ routeInfo, path, routeNamedParams, urlParser, namedPath, language }) {\n  const namedParams = () => {\n    const parsedParams = UrlParser(`https://fake.com${urlParser.pathname}`, namedPath).namedParams;\n\n    return { ...routeNamedParams, ...parsedParams };\n  };\n\n  const get = () => {\n    return {\n      name: path,\n      component: routeInfo.component,\n      hash: urlParser.hash,\n      layout: routeInfo.layout,\n      queryParams: urlParser.queryParams,\n      namedParams: namedParams(),\n      path,\n      language,\n    };\n  };\n\n  return Object.freeze({ get, namedParams });\n}\n\nexport { RouterRoute };\n","import { activeRoute } from './store';\nimport { RouterCurrent } from './router/current';\nimport { RouterFinder } from './router/finder';\nimport { removeSlash } from './lib/utils';\n\nconst NotFoundPage = '/404.html';\n\nlet userDefinedRoutes = [];\nlet routerOptions = {};\nlet routerCurrent;\n\n/**\n * Object exposes one single property: activeRoute\n * @param routes  Array of routes\n * @param currentUrl current url\n * @param options configuration options\n **/\nconst SpaRouter = (routes, currentUrl, options = {}) => {\n  routerOptions = { ...options };\n  if (typeof currentUrl === 'undefined' || currentUrl === '') {\n    currentUrl = document.location.href;\n  }\n\n  routerCurrent = RouterCurrent(routerOptions.gaPageviews);\n\n  currentUrl = removeSlash(currentUrl, 'trail');\n  userDefinedRoutes = routes;\n\n  const findActiveRoute = () => {\n    let convert = false;\n\n    if (routerOptions.langConvertTo) {\n      routerOptions.lang = routerOptions.langConvertTo;\n      convert = true;\n    }\n\n    return RouterFinder({ routes, currentUrl, routerOptions, convert }).findActiveRoute();\n  };\n\n  /**\n   * Redirect current route to another\n   * @param destinationUrl\n   **/\n  const navigateNow = (destinationUrl, updateBrowserHistory) => {\n    if (typeof window !== 'undefined') {\n      if (destinationUrl === NotFoundPage) {\n        routerCurrent.setActive({ path: NotFoundPage }, updateBrowserHistory);\n      } else {\n        navigateTo(destinationUrl);\n      }\n    }\n\n    return destinationUrl;\n  };\n\n  const setActiveRoute = (updateBrowserHistory = true) => {\n    const currentRoute = findActiveRoute();\n    if (currentRoute.redirectTo) {\n      return navigateNow(currentRoute.redirectTo, updateBrowserHistory);\n    }\n\n    routerCurrent.setActive(currentRoute, updateBrowserHistory);\n    activeRoute.set(currentRoute);\n\n    return currentRoute;\n  };\n\n  return Object.freeze({\n    setActiveRoute,\n    findActiveRoute,\n  });\n};\n\n/**\n * Converts a route to its localised version\n * @param pathName\n **/\nconst localisedRoute = (pathName, language) => {\n  pathName = removeSlash(pathName, 'lead');\n  routerOptions.langConvertTo = language;\n\n  return SpaRouter(userDefinedRoutes, 'http://fake.com/' + pathName, routerOptions).findActiveRoute();\n};\n\n/**\n * Updates the current active route and updates the browser pathname\n * @param pathName String\n * @param language String\n * @param updateBrowserHistory Boolean\n **/\nconst navigateTo = (pathName, language = null, updateBrowserHistory = true) => {\n  pathName = removeSlash(pathName, 'lead');\n\n  if (language) {\n    routerOptions.langConvertTo = language;\n  }\n\n  return SpaRouter(userDefinedRoutes, 'http://fake.com/' + pathName, routerOptions).setActiveRoute(\n    updateBrowserHistory\n  );\n};\n\n/**\n * Returns true if pathName is current active route\n * @param pathName String The path name to check against the current route.\n * @param includePath Boolean if true checks that pathName is included in current route. If false should match it.\n **/\nconst routeIsActive = (queryPath, includePath = false) => {\n  return routerCurrent.isActive(queryPath, includePath);\n};\n\nif (typeof window !== 'undefined') {\n  // Avoid full page reload on local routes\n  window.addEventListener('click', (event) => {\n    if (event.target.localName.toLowerCase() !== 'a') return;\n    if (event.metaKey || event.ctrlKey || event.shiftKey) return;\n\n    const sitePrefix = routerOptions.prefix ? `/${routerOptions.prefix.toLowerCase()}` : '';\n    const targetHostNameInternal = event.target.pathname && event.target.host === window.location.host;\n    const prefixMatchPath = sitePrefix.length > 1 ? event.target.pathname.startsWith(sitePrefix) : true;\n\n    if (targetHostNameInternal && prefixMatchPath) {\n      event.preventDefault();\n      let navigatePathname = event.target.pathname + event.target.search;\n\n      const destinationUrl = navigatePathname + event.target.search + event.target.hash;\n      if (event.target.target === '_blank') {\n        window.open(destinationUrl, 'newTab');\n      } else {\n        navigateTo(destinationUrl);\n      }\n    }\n  });\n\n  window.onpopstate = function (_event) {\n    let navigatePathname = window.location.pathname + window.location.search + window.location.hash;\n\n    navigateTo(navigatePathname, null, false);\n  };\n}\n\nexport { SpaRouter, localisedRoute, navigateTo, routeIsActive };\n","<script>\n  export let currentRoute = {};\n  export let params = {};\n</script>\n\n{#if currentRoute.layout}\n  <svelte:component this={currentRoute.layout} currentRoute={{ ...currentRoute, layout: '' }} {params} />\n{:else if currentRoute.component}\n  <svelte:component this={currentRoute.component} currentRoute={{ ...currentRoute, component: '' }} {params} />\n{:else if currentRoute.childRoute}\n  <svelte:self currentRoute={currentRoute.childRoute} {params} />\n{/if}\n","<script>\n  import { onMount } from 'svelte';\n\n  import { SpaRouter } from '../spa_router';\n  import Route from './route.svelte';\n  import { activeRoute } from '../store';\n\n  export let routes = [];\n  export let options = {};\n\n  onMount(() => {\n    SpaRouter(routes, document.location.href, options).setActiveRoute();\n  });\n</script>\n\n<Route currentRoute={$activeRoute} />\n","<script>\r\n    export let customStyles = \"\";\r\n</script>\r\n\r\n<section class=\"layout\" style={customStyles}>\r\n    <slot />\r\n</section>\r\n\r\n<style>\r\n    .layout {\r\n        min-height: 100vh;\r\n        width: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        background: #22212f;\r\n    }\r\n</style>\r\n","export const colors = {\r\n    primary: \"#FF002F\",\r\n    secondary: \"#111111\",\r\n};\r\n","<script>\r\n    export let clickEvent,\r\n        style,\r\n        color = \"primary\",\r\n        type = \"button\";\r\n\r\n    import { colors } from \"../constants/colors\";\r\n</script>\r\n\r\n<button\r\n    on:click={clickEvent}\r\n    {type}\r\n    style=\"{style !== undefined ? style : ''} background-color:{colors[color]};\"\r\n    ><slot /></button\r\n>\r\n\r\n<style>\r\n    button {\r\n        max-width: 80%;\r\n        font-size: 1.3rem;\r\n        cursor: pointer;\r\n        outline: none;\r\n        border: none;\r\n        border-radius: 10px;\r\n        padding: 15px 40px;\r\n        color: white;\r\n    }\r\n    @media screen and (max-width: 440px) {\r\n        button {\r\n            max-width: 100%;\r\n            width: 90%;\r\n            font-size: 1rem;\r\n        }\r\n    }\r\n</style>\r\n","<script>\r\n    import { navigateTo } from \"svelte-router-spa\";\r\n    import Layout from \"../components/Layout.svelte\";\r\n    import Button from \"../components/Button.svelte\";\r\n</script>\r\n\r\n<Layout>\r\n    <div class=\"info\">\r\n        <h1>Мафия</h1>\r\n        <span>Приложение для ведущего в карточной игре - мафия</span>\r\n        <Button clickEvent={() => navigateTo(\"home\")}>Начнём!</Button>\r\n    </div>\r\n</Layout>\r\n\r\n<style>\r\n    .info {\r\n        max-width: 80%;\r\n        z-index: 2;\r\n        color: #eeeef5;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        text-align: center;\r\n    }\r\n    .info h1 {\r\n        font-size: 5.2rem;\r\n        margin-bottom: 10px;\r\n        text-transform: uppercase;\r\n    }\r\n    .info span {\r\n        opacity: 0.5;\r\n        margin-bottom: 50px;\r\n    }\r\n</style>\r\n","<script>\r\n    import Layout from \"../components/Layout.svelte\";\r\n    import Button from \"../components/Button.svelte\";\r\n    import { navigateTo } from \"svelte-router-spa\";\r\n</script>\r\n\r\n<Layout>\r\n    <div class=\"selectTypeDistribution\">\r\n        <h1>Выберите тип раздачи</h1>\r\n        <Button\r\n            style={\"margin-bottom: 20px;\"}\r\n            clickEvent={() => navigateTo(\"auto-distribution\")}\r\n            >Автоматическая\r\n        </Button>\r\n        <Button\r\n            clickEvent={() => navigateTo(\"manual-distribution\")}\r\n            color=\"secondary\"\r\n            >Ручная\r\n        </Button>\r\n    </div>\r\n</Layout>\r\n\r\n<style>\r\n    .selectTypeDistribution {\r\n        color: #eeeef5;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        margin: 0 auto;\r\n        padding: 0 20px;\r\n    }\r\n    .selectTypeDistribution h1 {\r\n        max-width: 90%;\r\n        font-size: 2rem;\r\n        text-transform: uppercase;\r\n        text-align: center;\r\n        margin-bottom: 30px;\r\n        letter-spacing: 2px;\r\n    }\r\n</style>\r\n","<script>\r\n    import { navigateTo } from \"svelte-router-spa\";\r\n    import Button from \"../components/Button.svelte\";\r\n    import Layout from \"../components/Layout.svelte\";\r\n</script>\r\n\r\n<Layout>\r\n    <h1>УПС</h1>\r\n    <p>\r\n        Вы попали на страницу, функции для которой ещё в разработке. Пожалуйста\r\n        вернитесь на главную.\r\n    </p>\r\n    <Button clickEvent={navigateTo(\"/\")}>На главную</Button>\r\n</Layout>\r\n\r\n<style>\r\n</style>\r\n","<script>\r\n    export let style,\r\n        value,\r\n        onChange,\r\n        id,\r\n        type = \"text\",\r\n        placeholder = \"\",\r\n        min = 1,\r\n        max = 100;\r\n</script>\r\n\r\n<input\r\n    {type}\r\n    {placeholder}\r\n    {value}\r\n    {min}\r\n    {max}\r\n    {id}\r\n    {style}\r\n    on:input={onChange}\r\n/>\r\n\r\n<style>\r\n    input {\r\n        width: 100%;\r\n        font-size: 1.5rem;\r\n        padding: 7px 15px;\r\n        border-radius: 5px;\r\n        color: rgba(255, 255, 255, 0.8);\r\n        background-color: #151429;\r\n        border: none;\r\n        transition: 0.2s ease-in-out all;\r\n    }\r\n    input:focus {\r\n        color: white;\r\n    }\r\n    @media screen and (max-width: 440px) {\r\n        input {\r\n            width: 90%;\r\n            font-size: 1.3rem;\r\n        }\r\n    }\r\n</style>\r\n","<div class=\"modal\">\r\n    <slot />\r\n</div>\r\n\r\n<style>\r\n    .modal {\r\n        position: fixed;\r\n        width: 100%;\r\n        height: 100vh;\r\n        overflow: hidden;\r\n        top: 0;\r\n        left: 0;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        margin: auto;\r\n        flex-direction: column;\r\n        background: rgba(0, 0, 0, 0.3);\r\n        backdrop-filter: blur(10px);\r\n        z-index: 999;\r\n    }\r\n</style>\r\n","export const cards = {\r\n    mafia: \"Мафия\",\r\n    civilian: \"Мирный житель\",\r\n    doctor: \"Доктор\",\r\n    commissioner: \"Комиссар\",\r\n    exmafia: \"Дон мафии\",\r\n    maniac: \"Маньяк\",\r\n    prostitute: \"Путана\",\r\n    boss: \"Босс\",\r\n    yakuza: \"Якудза\",\r\n    thief: \"Вор\",\r\n};\r\n","import { get, writable } from \"svelte/store\";\r\nimport { cards } from \"./../constants/cards\";\r\n\r\nfunction createStore() {\r\n    const { subscribe, update } = writable({\r\n        playersCount: 1,\r\n        cards: [],\r\n        cardsCount: {},\r\n    });\r\n\r\n    return {\r\n        subscribe,\r\n        update,\r\n        //Подсчёт колоды исходя из количества игроков\r\n        calculateDistribution: () => {\r\n            let playersCount = get(store).playersCount;\r\n            let cards = [];\r\n            //Подсчёт всех \"мафий\"\r\n            for (let i = 0; i < Math.ceil(playersCount / 4); i++) {\r\n                cards.push(\"Мафия\");\r\n            }\r\n            playersCount -= Math.ceil(playersCount / 4);\r\n            //Проверка на то, хватает ли игроков для добавления роли \"Доктор\"\r\n            if (playersCount >= 4) {\r\n                cards.push(\"Доктор\");\r\n                playersCount--;\r\n            }\r\n            //Добавление \"комиссара\" в раздачу\r\n            if (playersCount > 0) {\r\n                cards.push(\"Комиссар\");\r\n                playersCount--;\r\n            }\r\n            //Дозагрузка всех оставшихся карт как \"мирные жители\"\r\n            for (let i = 0; i < playersCount; i++) {\r\n                cards.push(\"Мирный житель\");\r\n            }\r\n\r\n            //Обновление store созданной колодой\r\n            update((prev) => {\r\n                return { ...prev, cards };\r\n            });\r\n        },\r\n        calculateCardsCount: () => {\r\n            const cards = get(store).cards;\r\n            const cardsCount = {};\r\n            for (let i = 0; i < cards.length; i++) {\r\n                if (cardsCount[cards[i]] === undefined) {\r\n                    cardsCount[cards[i]] = 1;\r\n                } else {\r\n                    cardsCount[cards[i]]++;\r\n                }\r\n            }\r\n            update((prev) => {\r\n                return {\r\n                    ...prev,\r\n                    cardsCount,\r\n                };\r\n            });\r\n        },\r\n        loadCardsManual: (cardsObj) => {\r\n            let cardsArray = [];\r\n            Object.keys(cardsObj).forEach((cardName) => {\r\n                for (let i = 0; i < cardsObj[cardName]; i++) {\r\n                    cardsArray.push(cards[cardName]);\r\n                }\r\n            });\r\n            console.log(cardsArray);\r\n            update((prev) => {\r\n                return { ...prev, cards: cardsArray };\r\n            });\r\n        },\r\n        onChangePlayersCount(e) {\r\n            update((prev) => {\r\n                return {\r\n                    ...prev,\r\n                    playersCount: e.target.value,\r\n                };\r\n            });\r\n        },\r\n        reset: () => {\r\n            update((prev) => {\r\n                return { ...prev, cards: [] };\r\n            });\r\n        },\r\n    };\r\n}\r\n\r\nexport const store = createStore();\r\n","import { writable, get } from \"svelte/store\";\r\nimport { cards } from \"./../constants/cards\";\r\n\r\nfunction initStore() {\r\n    let initialStore = {};\r\n    Object.keys(cards).forEach((card) => {\r\n        initialStore[card] = 0;\r\n    });\r\n    return initialStore;\r\n}\r\n\r\nfunction createStore() {\r\n    const { update, subscribe } = writable({\r\n        cards: initStore(),\r\n    });\r\n\r\n    return {\r\n        subscribe,\r\n        update,\r\n        onCardCountChanged: (cardName, event) => {\r\n            let prevStore = get(manualStore).cards;\r\n\r\n            if (\r\n                event.target.value.toString().length > 0 &&\r\n                Number(event.target.value) > 0\r\n            ) {\r\n                prevStore[cardName] = Number(event.target.value);\r\n            } else {\r\n                prevStore[cardName] = 0;\r\n            }\r\n            update((prev) => {\r\n                return {\r\n                    ...prev,\r\n                    cards: prevStore,\r\n                };\r\n            });\r\n        },\r\n        incrementCardCount: (cardName) => {\r\n            let prevStore = get(manualStore).cards;\r\n            prevStore[cardName] = Number(prevStore[cardName]) + 1;\r\n            update((prev) => {\r\n                return {\r\n                    ...prev,\r\n                    cards: prevStore,\r\n                };\r\n            });\r\n        },\r\n        decrementCardCount: (cardName) => {\r\n            let prevStore = get(manualStore).cards;\r\n            if (prevStore[cardName] > 0) {\r\n                prevStore[cardName] = Number(prevStore[cardName]) - 1;\r\n                update((prev) => {\r\n                    return {\r\n                        ...prev,\r\n                        cards: prevStore,\r\n                    };\r\n                });\r\n            }\r\n        },\r\n        loadCardsFromAutoDistribution: (autoCards) => {\r\n            let prevStore = get(manualStore).cards;\r\n            const entries = Object.entries(cards);\r\n            const autoCardsEntries = Object.entries(autoCards);\r\n            for (let i = 0; i < autoCardsEntries.length; i++) {\r\n                for (let j = 0; j < entries.length; j++) {\r\n                    if (\r\n                        entries[j][1].toLowerCase() ===\r\n                        autoCardsEntries[i][0].toLowerCase()\r\n                    ) {\r\n                        prevStore[entries[j][0]] = autoCardsEntries[i][1];\r\n                    }\r\n                }\r\n            }\r\n            update((prev) => {\r\n                return {\r\n                    ...prev,\r\n                    cards: prevStore,\r\n                };\r\n            });\r\n        },\r\n    };\r\n}\r\n\r\nexport const manualStore = createStore();\r\n","<div class=\"container\"><slot /></div>\r\n\r\n<style>\r\n    :global(.container) {\r\n        width: 100%;\r\n        min-height: 100vh;\r\n        display: flex;\r\n        flex-direction: column;\r\n        color: #eeeef5;\r\n        align-self: baseline;\r\n        margin-right: auto;\r\n        padding: 25px;\r\n    }\r\n    :global(.container h1) {\r\n        font-size: 2.2rem;\r\n    }\r\n    :global(.container hr) {\r\n        margin-top: 10px;\r\n        margin-bottom: 45px;\r\n        background-color: #eeeef5;\r\n        border: none;\r\n        border-radius: 3px;\r\n        height: 5px;\r\n        width: 25%;\r\n    }\r\n\r\n    :global(.buttons) {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        margin-top: 15px;\r\n        margin-left: auto;\r\n        margin-right: auto;\r\n    }\r\n    @media screen and (max-width: 440px) {\r\n        :global(.buttons) {\r\n            justify-content: center;\r\n            text-align: center;\r\n        }\r\n        :global(.buttons *) {\r\n            margin-bottom: 15px;\r\n        }\r\n        :global(.buttons *:last-child) {\r\n            margin-bottom: 0;\r\n        }\r\n    }\r\n</style>\r\n","<table class=\"table\"><slot /></table>\r\n\r\n<style>\r\n    :global(.table) {\r\n        width: 100%;\r\n    }\r\n    :global(.table th) {\r\n        font-size: 22px;\r\n    }\r\n    :global(.table td) {\r\n        font-size: 20px;\r\n        padding: 15px 0;\r\n    }\r\n</style>\r\n","import { get, writable } from \"svelte/store\";\r\n\r\nfunction createStore() {\r\n    const { set, subscribe, update } = writable({\r\n        cardsHiddened: [],\r\n        cardsOpened: [],\r\n    });\r\n\r\n    return {\r\n        subscribe,\r\n        update,\r\n        loadCards: (cards) => {\r\n            //Перемешивание массива карт\r\n            let currentIndex = cards.length,\r\n                randomIndex;\r\n            while (currentIndex != 0) {\r\n                randomIndex = Math.floor(Math.random() * currentIndex);\r\n                currentIndex--;\r\n\r\n                [cards[currentIndex], cards[randomIndex]] = [\r\n                    cards[randomIndex],\r\n                    cards[currentIndex],\r\n                ];\r\n            }\r\n\r\n            //Загрузка массива карт в store для показа игрокам\r\n            set({ cardsHiddened: cards, cardsOpened: [] });\r\n        },\r\n        //Сохранить уже открытые карты в массиве вскрытых карт\r\n        pushToHistoryDistribution: (card) => {\r\n            const cards = get(mainStore).cardsOpened;\r\n            update((prev) => {\r\n                return {\r\n                    ...prev,\r\n                    cardsOpened: [...cards, card],\r\n                };\r\n            });\r\n        },\r\n        deleteOpenedCard: (card) => {\r\n            const cards = get(mainStore).cardsHiddened;\r\n            cards.shift();\r\n            update((prev) => {\r\n                return {\r\n                    ...prev,\r\n                    cardsHiddened: cards,\r\n                };\r\n            });\r\n        },\r\n        returnOpenedCardInRotation: () => {\r\n            const hiddened = get(mainStore).cardsHiddened;\r\n            const opened = get(mainStore).cardsOpened;\r\n            update((prev) => {\r\n                return {\r\n                    ...prev,\r\n                    cardsHiddened: [opened[opened.length - 1], ...hiddened],\r\n                };\r\n            });\r\n        },\r\n    };\r\n}\r\n\r\nexport const mainStore = createStore();\r\n","<script>\r\n    import { navigateTo } from \"svelte-router-spa\";\r\n    import Button from \"../components/Button.svelte\";\r\n    import Container from \"../components/Container.svelte\";\r\n    import Layout from \"../components/Layout.svelte\";\r\n    import Table from \"../components/Table.svelte\";\r\n    import { store } from \"../store/autodistrib.js\";\r\n    import { mainStore } from \"../store/showdistrib.js\";\r\n\r\n    function onDistributionCards() {\r\n        mainStore.loadCards($store.cards);\r\n        navigateTo(\"show-distribution\");\r\n    }\r\n\r\n    export let backBtnEvent = () => navigateTo(\"manual-distribution\");\r\n</script>\r\n\r\n<Layout>\r\n    <Container>\r\n        <div>\r\n            <h1>Ваша колода</h1>\r\n            <hr />\r\n        </div>\r\n        <div style=\"flex: 1 1 auto;\">\r\n            <Table>\r\n                <thead>\r\n                    <th align=\"left\">Название карты</th>\r\n                    <th align=\"right\">Количество</th>\r\n                </thead>\r\n                {#each Object.entries($store.cardsCount) as [key, value]}\r\n                    <tr><td>{key}</td><td align=\"right\">{value}</td></tr>\r\n                {/each}\r\n            </Table>\r\n        </div>\r\n\r\n        <div class=\"buttons\" style=\"width: 80%;\">\r\n            <slot />\r\n            <Button clickEvent={onDistributionCards} style=\"font-size: 1rem;\"\r\n                >Раздать</Button\r\n            >\r\n            <Button\r\n                style=\"font-size: 1rem;\"\r\n                color=\"secondary\"\r\n                clickEvent={backBtnEvent}>Назад</Button\r\n            >\r\n        </div>\r\n    </Container>\r\n</Layout>\r\n","<script>\r\n    import { navigateTo } from \"svelte-router-spa\";\r\n\r\n    import { onMount } from \"svelte/internal\";\r\n    import Button from \"../components/Button.svelte\";\r\n    import Input from \"../components/Input.svelte\";\r\n    import Modal from \"../components/Modal.svelte\";\r\n    import { store } from \"../store/autodistrib.js\";\r\n    import { manualStore } from \"../store/manualdistrib\";\r\n    import DistributionPreview from \"./DistributionPreview.svelte\";\r\n\r\n    onMount(() => {\r\n        store.reset();\r\n    });\r\n    let modalFlag = true; //Флаг статуса показа модалки с выбором количества пользователей\r\n    let errorFlag = false; //Флаг статуса показа ошибки некорректного ввода количества игроков\r\n\r\n    function onSavePlayers() {\r\n        if (\r\n            $store.playersCount.toString() > 0 &&\r\n            Number($store.playersCount) >= 1\r\n        ) {\r\n            errorFlag = false;\r\n            modalFlag = false;\r\n            store.calculateDistribution();\r\n            store.calculateCardsCount();\r\n        } else {\r\n            errorFlag = true;\r\n        }\r\n    }\r\n\r\n    function onChangeDistribution() {\r\n        manualStore.loadCardsFromAutoDistribution($store.cardsCount);\r\n        navigateTo(\"manual-distribution\");\r\n    }\r\n</script>\r\n\r\n{#if $store.playersCount <= 0 || modalFlag}\r\n    <Modal>\r\n        <div class=\"modalArea\">\r\n            <div class=\"playersCountArea buttons\">\r\n                <label for=\"playersCount\">Количество игроков</label>\r\n                <Input\r\n                    id=\"playersCount\"\r\n                    type=\"number\"\r\n                    value={$store.playersCount}\r\n                    onChange={store.onChangePlayersCount}\r\n                    style=\"margin-bottom: 15px;\"\r\n                />\r\n                <Button clickEvent={onSavePlayers} style=\"font-size: 1rem;\"\r\n                    >Сохранить</Button\r\n                >\r\n                <Button\r\n                    clickEvent={() => navigateTo(\"/home\")}\r\n                    style=\"font-size: 1rem;\"\r\n                    color=\"secondary\">Назад</Button\r\n                >\r\n            </div>\r\n            <span class=\"error {errorFlag && 'show'}\">\r\n                Недопустимое число игроков. Введите корректное число.\r\n            </span>\r\n        </div>\r\n    </Modal>\r\n{/if}\r\n\r\n<DistributionPreview backBtnEvent={() => (modalFlag = true)}>\r\n    <Button\r\n        clickEvent={onChangeDistribution}\r\n        style=\"font-size: 1rem;\"\r\n        color=\"secondary\">Изменить раздачу</Button\r\n    >\r\n</DistributionPreview>\r\n\r\n<style>\r\n    .modalArea {\r\n        color: #eeeef5;\r\n        width: 80%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: center;\r\n        margin: 0 auto;\r\n        padding: 5px 30px 25px 30px;\r\n        background-color: #27263b;\r\n        border-radius: 10px;\r\n    }\r\n    .playersCountArea {\r\n        width: 100%;\r\n    }\r\n    .playersCountArea label {\r\n        display: block;\r\n        font-size: 1.3rem;\r\n        margin-bottom: 10px;\r\n    }\r\n    .error {\r\n        display: none;\r\n        margin-top: 15px;\r\n        color: rgb(201 19 19);\r\n        font-size: 1.2rem;\r\n    }\r\n    .show {\r\n        display: block !important;\r\n        text-align: center;\r\n    }\r\n</style>\r\n","<script>\r\n    import { navigateTo } from \"svelte-router-spa\";\r\n    import Button from \"../components/Button.svelte\";\r\n    import Container from \"../components/Container.svelte\";\r\n    import Layout from \"../components/Layout.svelte\";\r\n    import Table from \"../components/Table.svelte\";\r\n    import { cards } from \"../constants/cards.js\";\r\n    import { manualStore } from \"../store/manualdistrib.js\";\r\n    import { store } from \"../store/autodistrib.js\";\r\n\r\n    function onDistributionComplieted() {\r\n        store.loadCardsManual($manualStore.cards);\r\n        store.calculateCardsCount();\r\n        navigateTo(\"preview-distribution\");\r\n    }\r\n</script>\r\n\r\n<Layout>\r\n    <Container>\r\n        <div>\r\n            <h1>Выберите карты</h1>\r\n            <hr />\r\n        </div>\r\n        <div class=\"roles\">\r\n            <Table>\r\n                <thead>\r\n                    <th align=\"left\">Название карты</th>\r\n                    <th align=\"right\">Количество</th>\r\n                </thead>\r\n                {#each Object.entries(cards) as [cardName, role]}\r\n                    <tr>\r\n                        <td>{role}</td>\r\n                        <td align=\"right\" class=\"cardCounterColumn\">\r\n                            <button\r\n                                class=\"changeCardCountBtn\"\r\n                                on:click={() =>\r\n                                    manualStore.incrementCardCount(cardName)}\r\n                                >+</button\r\n                            >\r\n                            <input\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                max=\"100\"\r\n                                name={cardName}\r\n                                value={$manualStore.cards[cardName]}\r\n                                class=\"cardCountInput {$manualStore.cards[\r\n                                    cardName\r\n                                ] !== 0\r\n                                    ? 'activeCard'\r\n                                    : ''}\"\r\n                                on:input={(e) =>\r\n                                    manualStore.onCardCountChanged(cardName, e)}\r\n                            />\r\n                            <button\r\n                                class=\"changeCardCountBtn\"\r\n                                on:click={() =>\r\n                                    manualStore.decrementCardCount(cardName)}\r\n                                >-</button\r\n                            >\r\n                        </td>\r\n                    </tr>\r\n                {/each}\r\n            </Table>\r\n        </div>\r\n        <h2 class=\"cardCounterIndicator\">\r\n            Количество игроков: {Object.values($manualStore.cards).reduce(\r\n                (partialSum, a) => partialSum + a,\r\n                0\r\n            )}\r\n        </h2>\r\n        <div class=\"buttons\">\r\n            <Button clickEvent={onDistributionComplieted}>Подтвердить</Button>\r\n            <Button color=\"secondary\" clickEvent={() => navigateTo(\"/home\")}\r\n                >Назад</Button\r\n            >\r\n        </div>\r\n    </Container>\r\n</Layout>\r\n\r\n<style>\r\n    .roles {\r\n        flex: 1 1 auto;\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n    .buttons {\r\n        width: 90%;\r\n    }\r\n    .cardCountInput {\r\n        width: 3rem;\r\n        color: #6f6f6f;\r\n        background-color: transparent;\r\n        border: none;\r\n        font-size: 1.5rem;\r\n        text-align: center;\r\n        transition: 0.3s ease-in-out all;\r\n    }\r\n    .cardCountInput.activeCard {\r\n        color: #eeeef5;\r\n    }\r\n    .changeCardCountBtn {\r\n        font-size: 1.5rem;\r\n        color: #eeeef5;\r\n        background-color: #3f3d5e;\r\n        border: none;\r\n        padding: 3px 15px;\r\n        border-radius: 8px;\r\n    }\r\n    .cardCounterColumn {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n        align-items: center;\r\n    }\r\n    .cardCounterIndicator {\r\n        margin: 20px 0;\r\n        text-align: center;\r\n    }\r\n</style>\r\n","<script>\r\n    import { mainStore } from \"../store/showdistrib.js\";\r\n    import Layout from \"../components/Layout.svelte\";\r\n    import { navigateTo } from \"svelte-router-spa\";\r\n\r\n    //Статус показа карты (рубашка - false, название карты - true)\r\n    let cardViewFlag = false;\r\n\r\n    //Название показываемой на данный момент карты\r\n    let activeCard = \"\";\r\n\r\n    //Статус завершения раздачи (true - раздача окончена)\r\n    let closeDistributionFlag = false;\r\n\r\n    //Функция показа ролей карт\r\n    function onCardOpened() {\r\n        let openedCardsCount = $mainStore.cardsHiddened.length;\r\n        if (openedCardsCount > 0) {\r\n            if (cardViewFlag === false) {\r\n                activeCard = $mainStore.cardsHiddened[0];\r\n                mainStore.deleteOpenedCard();\r\n                mainStore.pushToHistoryDistribution(activeCard);\r\n            }\r\n            cardViewFlag = !cardViewFlag;\r\n        } else {\r\n            if (closeDistributionFlag === true) {\r\n                console.log($mainStore.cardsOpened);\r\n                navigateTo(\"/\");\r\n            }\r\n            activeCard = \"Раздача окончена. Нажмите ещё раз для выхода в меню.\";\r\n            cardViewFlag = true;\r\n            closeDistributionFlag = true;\r\n        }\r\n    }\r\n</script>\r\n\r\n<Layout>\r\n    <div class=\"cardsArea\">\r\n        <h1>Нажмите на карту, чтобы получить свою роль</h1>\r\n        <div class=\"card\" on:click={onCardOpened}>\r\n            <div class=\"cardFront{cardViewFlag ? ' cardFrontHiddened' : ''}\">\r\n                <img src=\"assets/logo2.png\" alt=\"Логотип\" />\r\n            </div>\r\n            <div class=\"cardBack{cardViewFlag ? ' cardBackOpened' : ''}\">\r\n                <span>{activeCard}</span>\r\n            </div>\r\n        </div>\r\n        <span class=\"cardsCounter\"\r\n            >Осталось карт: {$mainStore.cardsHiddened.length}</span\r\n        >\r\n        <!-- <button on:click={mainStore.returnOpenedCardInRotation}\r\n            >Вернуть карту в ротацию</button\r\n        > -->\r\n    </div>\r\n</Layout>\r\n\r\n<style>\r\n    .cardsArea {\r\n        width: 100%;\r\n        overflow: hidden;\r\n        color: #eeeef5;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        margin-right: auto;\r\n        align-self: baseline;\r\n        padding: 25px;\r\n        min-height: 100vh;\r\n    }\r\n    .cardsArea h1 {\r\n        font-size: 1.5rem;\r\n        text-align: center;\r\n    }\r\n    .card {\r\n        flex: 1 1 auto;\r\n        margin: 30px;\r\n        position: relative;\r\n        perspective: 1000px;\r\n    }\r\n    .cardsCounter {\r\n        font-size: 1.4rem;\r\n        text-align: center;\r\n    }\r\n    .cardFront,\r\n    .cardBack {\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 100%;\r\n        left: 0;\r\n        top: 0;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        transition: 1s;\r\n        backface-visibility: hidden;\r\n        overflow: hidden;\r\n        border-radius: 20px;\r\n        text-align: center;\r\n    }\r\n    .cardFront {\r\n        background-image: url(\"/assets/cardbg.jpg\");\r\n    }\r\n    .cardBack {\r\n        background-color: #3f3d5e;\r\n        font-size: 1.8rem;\r\n        transform: rotateY(-180deg);\r\n    }\r\n    .cardFrontHiddened {\r\n        transform: rotateY(-180deg);\r\n    }\r\n    .cardBackOpened {\r\n        transform: rotateY(-360deg);\r\n    }\r\n</style>\r\n","import MainPage from \"../pages/MainPage.svelte\";\r\nimport HomePage from \"../pages/HomePage.svelte\";\r\nimport Page404 from \"../pages/404.svelte\";\r\nimport AutoDistributionPage from \"../pages/AutoDistribution.svelte\";\r\nimport ManualDistributionPage from \"../pages/ManualDistribution.svelte\";\r\nimport ShowDistributionPage from \"../pages/ShowDistribution.svelte\";\r\nimport PreviewDistiributionPage from \"../pages/DistributionPreview.svelte\";\r\n\r\nexport const routes = [\r\n    {\r\n        name: \"/\",\r\n        component: MainPage,\r\n    },\r\n    {\r\n        name: \"home\",\r\n        component: HomePage,\r\n    },\r\n    {\r\n        name: \"404\",\r\n        path: \"404\",\r\n        component: Page404,\r\n    },\r\n    {\r\n        name: \"auto-distribution\",\r\n        component: AutoDistributionPage,\r\n    },\r\n    {\r\n        name: \"manual-distribution\",\r\n        component: ManualDistributionPage,\r\n    },\r\n    {\r\n        name: \"show-distribution\",\r\n        component: ShowDistributionPage,\r\n    },\r\n    {\r\n        name: \"preview-distribution\",\r\n        component: PreviewDistiributionPage,\r\n    },\r\n];\r\n","import App from \"./App.svelte\";\n\nconst app = new App({\n    target: document.body,\n});\n\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","subscribe","store","callbacks","unsub","unsubscribe","get_store_value","value","_","component_subscribe","component","callback","$$","on_destroy","push","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","tar","src","k","assign","slice","get_slot_changes","dirty","lets","undefined","merged","len","Math","max","length","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","p","get_all_dirty_from_scope","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","d","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_style","key","important","style","removeProperty","setProperty","set_current_component","onMount","Error","get_current_component","on_mount","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","has","add","clear","fragment","before_update","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","create_component","mount_component","customElement","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","subscriber_queue","writable","start","stop","subscribers","set","new_value","run_queue","subscriber","invalidate","size","activeRoute","remove","UrlParser","urlString","namedUrl","urlBase","URL","namedParamsWithIndex","getPathNames","reduce","validParams","param","pathNames","pathname","pathName","trim","split","freeze","hash","host","hostname","namedParams","allPathName","values","paramKey","namedParamsKeys","namedParamsValues","port","protocol","search","queryParams","params","searchParams","queryParamsKeys","_value","queryParamsValues","anyEmptyNestedRoutes","routeObject","result","childRoute","compareRoutes","routeName","removeSlash","includes","startsWith","findLocalisedRoute","route","language","exists","lang","entries","nameToPath","toLowerCase","position","replace","routeNameLocalised","RouterCurrent","trackPage","trackPageview","pushActiveRoute","newRoute","updateBrowserHistory","window","pathAndSearch","currentRoute","path","join","pathWithQueryParams","history","pushState","page","gaTracking","newPage","ga","active","isActive","queryPath","includePath","activeRoutePath","setActive","RouterRedirect","currentPath","guard","onlyIf","guardInfo","valid","redirect","redirectPath","destinationUrl","RouterGuard","redirectTo","RouterPath","basePath","basePathName","convert","currentLanguage","updatedPathRoute","routePathLanguage","localisedPathName","localisedRouteWithoutNamedParams","basePathNameWithoutNamedParams","basePathSameAsLocalised","updatedPath","basePathResult","localisedRoute","routeNames","shift","currentPathName","updateRoutePath","namedPath","localisedPath","routeLanguage","routePath","routePathValue","basePathNames","names","removeExtraPaths","getNamedParams","RouterFinder","routes","currentUrl","routerOptions","defaultLanguage","sitePrefix","prefix","urlParser","replacePattern","endsWith","noPrefixUrl","parseCurrentUrl","routeNamedParams","staticParamMatch","searchActiveRoutes","routerPath","startsWithNamedParam","matchRoute","routerRoute","routeInfo","parsedParams","get","layout","RouterRoute","setCurrentRoute","nestedRoutes","nestedRoutesAndNoPath","indexRoute","routeNotFound","customLanguage","custom404Page","find","findActiveRoute","searchActiveRoute","NotFoundPage","routerCurrent","userDefinedRoutes","SpaRouter","location","href","gaPageviews","langConvertTo","setActiveRoute","navigateTo","navigateNow","route_changes","switch_value","localName","metaKey","ctrlKey","shiftKey","targetHostNameInternal","prefixMatchPath","preventDefault","open","onpopstate","_event","navigatePathname","section","customStyles","colors","primary","secondary","button","apply","arguments","clickEvent","color","div","h1","span","input","onChange","id","placeholder","min","cards","mafia","civilian","doctor","commissioner","exmafia","maniac","prostitute","boss","yakuza","thief","playersCount","cardsCount","calculateDistribution","ceil","prev","calculateCardsCount","loadCardsManual","cardsObj","cardsArray","cardName","console","log","onChangePlayersCount","e","reset","createStore","initStore","initialStore","card","manualStore","onCardCountChanged","prevStore","toString","Number","incrementCardCount","decrementCardCount","loadCardsFromAutoDistribution","autoCards","autoCardsEntries","j","table","mainStore","cardsHiddened","cardsOpened","loadCards","randomIndex","currentIndex","floor","random","pushToHistoryDistribution","deleteOpenedCard","returnOpenedCardInRotation","hiddened","opened","tr","td0","td1","t0","t0_value","t1","t1_value","each_value","thead","div0","div1","div2","backBtnEvent","$store","span_class_value","label","input_changes","current","if_block","create_if_block","modalFlag","errorFlag","$$invalidate","input_class_value","button0","button1","input_value_value","func","h2","t5","t5_value","partialSum","$manualStore","element_src","url","div3","img","span0","span1","t6","t6_value","cardViewFlag","activeCard","closeDistributionFlag","$mainStore","PreviewDistiributionPage","body"],"mappings":"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"}